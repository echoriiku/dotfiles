local wezterm = require 'wezterm'
local mux = wezterm.mux
local act = wezterm.action

-- Decide whether cmd represents a default startup invocation
function is_default_startup(cmd)
  if not cmd then
    -- we were started with `wezterm` or `wezterm start` with
    -- no other arguments
    return true
  end
  if cmd.domain == "DefaultDomain" and not cmd.args then
    -- Launched via `wezterm start --cwd something`
    return true
  end
  -- we were launched some other way
  return false
end

wezterm.on('gui-startup', function(cmd)
  if is_default_startup(cmd) then
    -- for the default startup case, we want to switch to the unix domain instead
    local unix = mux.get_domain("unix")
    mux.set_default_domain(unix)
    -- ensure that it is attached
    unix:attach()
  end
end)

return {
  unix_domains = {
    { name = "unix" }
  }
}

-- Main configuration table
local config = {
  automatically_reload_config = true,
  font = wezterm.font('JetBrainsMono Nerd Font'),
  font_size = 12.0,
  color_scheme = 'Catppuccin Mocha',
  window_decorations = "TITLE | RESIZE",
  initial_rows = 50,
  initial_cols = 170,
  animation_fps = 144,
  max_fps = 144,
  front_end = 'WebGpu', -- WezTerm will automatically choose the best GPU
  webgpu_power_preference = 'HighPerformance',
  hide_tab_bar_if_only_one_tab = false,
  tab_bar_at_bottom = true,
  use_fancy_tab_bar = false,
  tab_and_split_indices_are_zero_based = true,
}

-- Maximize the window on startup
wezterm.on("gui-startup", function(cmd)
  local tab, pane, window = mux.spawn_window(cmd or {})
  window:gui_window():maximize()
end)

-- Window settings
config.window_padding = {
  left = 3,
  right = 5,
  top = 5,
  bottom = 3,
}
config.window_close_confirmation = 'NeverPrompt'

-- Window frame font settings
config.window_frame = {
  font = config.font,
  font_size = config.font_size,
}

-- Tab bar color settings
config.colors = {
  tab_bar = {
    inactive_tab_edge = '#575757',
  },
}

-- Key tables, including Vim-like copy mode
config.key_tables = {
  copy_mode = {
    -- Vim-like movement
    { key = 'h', mods = 'NONE', action = act.CopyMode 'MoveLeft' },
    { key = 'j', mods = 'NONE', action = act.CopyMode 'MoveDown' },
    { key = 'k', mods = 'NONE', action = act.CopyMode 'MoveUp' },
    { key = 'l', mods = 'NONE', action = act.CopyMode 'MoveRight' },
    -- Word navigation
    { key = 'w', mods = 'NONE', action = act.CopyMode 'MoveForwardWord' },
    { key = 'b', mods = 'NONE', action = act.CopyMode 'MoveBackwardWord' },
    -- Line navigation
    { key = '0', mods = 'NONE', action = act.CopyMode 'MoveToStartOfLine' },
    { key = '$', mods = 'NONE', action = act.CopyMode 'MoveToEndOfLineContent' },
    -- Page navigation
    { key = 'g', mods = 'NONE', action = act.CopyMode 'MoveToScrollbackTop' },
    { key = 'G', mods = 'SHIFT', action = act.CopyMode 'MoveToScrollbackBottom' },
    -- Selection
    { key = 'v', mods = 'NONE', action = act.CopyMode { SetSelectionMode = 'Cell' } },
    { key = 'V', mods = 'SHIFT', action = act.CopyMode { SetSelectionMode = 'Line' } },
    -- Copy and exit
    { key = 'y', mods = 'NONE', action = act.Multiple {
        { CopyTo = 'ClipboardAndPrimarySelection' },
        { CopyMode = 'Close' },
      }
    },
    -- Exit copy mode
    { key = 'q', mods = 'NONE', action = act.CopyMode 'Close' },
    -- Scroll and page up/down
    { key = 'PageUp', mods = 'NONE', action = act.CopyMode 'PageUp' },
    { key = 'PageDown', mods = 'NONE', action = act.CopyMode 'PageDown' },
  },
}

-- Key bindings, including copy mode activation
config.leader = { key = "b", mods = "CTRL", timeout_milliseconds = 2000 }
config.keys = {
  -- Activate copy mode with Vim-like bindings
  {
    mods = 'LEADER',
    key = '[',
    action = act.ActivateCopyMode,
  },

  -- Other existing key bindings (like pane and tab management)
  {
    mods = "LEADER",
    key = "c",
    action = wezterm.action.SpawnTab "CurrentPaneDomain",
  },
  {
    mods = "LEADER",
    key = "x",
    action = wezterm.action.CloseCurrentPane { confirm = true }
  },
  {
    mods = "LEADER",
    key = "p",
    action = wezterm.action.ActivateTabRelative(-1)
  },
  {
    mods = "LEADER",
    key = "n",
    action = wezterm.action.ActivateTabRelative(1)
  },
  {
    mods = "LEADER|SHIFT",
    key = '"',
    action = wezterm.action.SplitHorizontal { domain = "CurrentPaneDomain" }
  },
  {
    mods = "LEADER|SHIFT",
    key = "%",
    action = wezterm.action.SplitVertical { domain = "CurrentPaneDomain" }
  },

  -- Use CTRL + [h|j|k|l] to move between panes
  {
      key = "h",
      mods = "CTRL",
      action = wezterm.action.ActivatePaneDirection("Left")
  },
  {
      key = "j",
      mods = "CTRL",
      action = wezterm.action.ActivatePaneDirection("Down")
  },
  {
      key = "k",
      mods = "CTRL",
      action = wezterm.action.ActivatePaneDirection("Up")
  },
  {
      key = "l",
      mods = "CTRL",
      action = wezterm.action.ActivatePaneDirection("Right")
  },
  -- Add other key bindings as needed...
}

for i = 0, 9 do
  table.insert(config.keys, {
    key = tostring(i),
    mods = "LEADER",
    action = wezterm.action.ActivateTab(i),
  })
end

-- Domain-related keybindings
table.insert(config.keys, {
  key = 'a',
  mods = 'LEADER',
  action = wezterm.action.AttachDomain('unix'),
})
table.insert(config.keys, {
  key = 'd',
  mods = 'LEADER',
  action = wezterm.action.DetachDomain { DomainName = 'unix' },
})

-- Rename current session
table.insert(config.keys, {
  key = '$',
  mods = 'LEADER|SHIFT',
  action = wezterm.action.PromptInputLine {
    description = 'Enter new name for session',
    action = wezterm.action_callback(function(window, pane, line)
      if line then
        mux.rename_workspace(window:mux_window():get_workspace(), line)
      end
    end),
  },
})

-- Show workspace list
table.insert(config.keys, {
  key = 's',
  mods = 'LEADER',
  action = wezterm.action.ShowLauncherArgs { flags = 'WORKSPACES' },
})

-- Status bar customization (example for left status)
wezterm.on("update-right-status", function(window, _)
  local SOLID_LEFT_ARROW = ""
  local ARROW_FOREGROUND = { Foreground = { Color = "#c6a0f6" } }
  local prefix = ""

  if window:leader_is_active() then
    prefix = " " .. utf8.char(0x1f30a) -- Ocean wave
    SOLID_LEFT_ARROW = utf8.char(0xe0b2)
  end

  if window:active_tab():tab_id() ~= 0 then
    ARROW_FOREGROUND = { Foreground = { Color = "#1e2030" } }
  end -- Arrow color based on if tab is first pane

  window:set_left_status(wezterm.format {
    { Background = { Color = "#b7bdf8" } },
    { Text = prefix },
    ARROW_FOREGROUND,
    { Text = SOLID_LEFT_ARROW }
  })
end)

-- Return the final configuration to WezTerm
return config
